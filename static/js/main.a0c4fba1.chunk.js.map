{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","logger","message","state","log","console","reset","setState","display","a","b","operator","buttonPress","e","target","id","doMath","toString","indexOf","index","Object","keys","stringToNum","pre","option","Boolean","parseInt","mathSymbols","result","mathOperations","parseFloat","className","this","onClick","React","Component","zero","one","two","three","four","five","six","seven","eight","nine","add","subtract","multiply","divide","equals","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,8HCIrCC,G,8DACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAGRC,OAAS,SAACC,GACJ,EAAKC,MAAMC,KACbC,QAAQD,IAAIF,IANG,EASnBI,MAAQ,WACN,EAAKC,SAAS,CAAEC,QAAS,IAAKC,EAAG,GAAIC,EAAG,GAAIC,SAAU,MAVrC,EAYnBC,YAAc,SAACC,GAEb,OADA,EAAKZ,OAAO,EAAKE,OACTU,EAAEC,OAAOC,IACf,IAAK,QACH,EAAKT,QACL,MACF,IAAK,SACL,IAAK,MACL,IAAK,WACL,IAAK,SACL,IAAK,WACH,EAAKU,OAAOH,EAAEC,OAAOC,IACrB,MACF,IAAK,OACH,GAA2B,MAAvB,EAAKZ,MAAMK,QACb,MAEA,EAAKD,SAAS,CACZC,QAAS,EAAKL,MAAMK,QAAU,IAC9BE,EAAG,EAAKP,MAAMO,EAAI,MAGtB,MACF,IAAK,UAEH,GADA,EAAKT,OAAO,EAAKE,MAAMO,EAAEO,YACrB,EAAKd,MAAMO,EAAEO,WAAWC,QAAQ,MAAQ,EAC1C,MAEF,EAAKX,SAAS,CACZC,QAAS,EAAKL,MAAMK,QAAU,IAC9BE,EAAG,EAAKP,MAAMO,EAAI,MAEpB,MACF,QAME,IAAIS,EAAQC,OAAOC,KAAKC,GAAaJ,QAAQL,EAAEC,OAAOC,IAClDQ,EAAM,GACNJ,GAAS,IACgB,MAAvB,EAAKhB,MAAMK,UACbe,EAAM,EAAKpB,MAAMK,SAEnB,EAAKD,SAAS,CACZC,QAASe,EAAMJ,EAAMF,WACrBP,EAAG,EAAKP,MAAMO,EAAIS,EAAMF,gBA3Df,EAiEnBD,OAAS,SAACQ,GACR,OAAQA,GACN,IAAK,MACL,IAAK,WACL,IAAK,SACL,IAAK,WACH,GAAK,EAAKrB,MAAMQ,UAQT,GACL,EAAKR,MAAMQ,UACXa,IAAW,EAAKrB,MAAMQ,WACrBc,QAAQC,SAAS,EAAKvB,MAAMO,IAGf,YAAVc,EACF,EAAKjB,SAAS,CACZC,QAAS,EAAKL,MAAMK,QAAUmB,EAAYH,GAC1Cd,EAAG,MAGL,EAAKH,SAAS,CACZC,QAAS,EAAKL,MAAMK,QAAUmB,EAAYH,GAC1Cd,EAAG,GACHC,SAAUa,SAGT,GACL,EAAKrB,MAAMQ,UACX,EAAKR,MAAMM,GACX,EAAKN,MAAMO,GACM,MAAjB,EAAKP,MAAMO,EACX,CAEA,IAAIkB,EACJA,EAASC,EAAe,EAAK1B,MAAMQ,UACjCmB,WAAW,EAAK3B,MAAMM,GACtBqB,WAAW,EAAK3B,MAAMO,IAExB,EAAKH,SAAS,CACZC,QAASoB,EAASD,EAAYH,GAC9Bf,EAAGmB,EACHlB,EAAG,GACHC,SAAUa,UAxCZ,EAAKjB,SAAS,CACZC,QAAS,EAAKL,MAAMK,QAAUmB,EAAYH,GAC1Cf,EAAG,EAAKN,MAAMO,EACdA,EAAG,GACHC,SAAUa,IAuCdnB,QAAQD,IAAI,EAAKD,OACjB,MACF,IAAK,SACH,GAAI,EAAKA,MAAMO,GAAK,EAAKP,MAAMQ,SAAU,CACvC,IAAIF,EAAI,EAAKN,MAAMM,GAAK,EACpBmB,EAASC,EAAe,EAAK1B,MAAMQ,UACrCmB,WAAWrB,GACXqB,WAAW,EAAK3B,MAAMO,IAGxB,EAAKH,SAAS,CAIZC,QAASoB,EACTlB,EAAGkB,EACHnB,EAAG,GACHE,SAAU,QAnIlB,EAAKR,MAAQ,CAAEK,QAAS,IAAKC,EAAG,GAAIC,EAAG,GAAIC,SAAU,GAAIP,KAAK,GAF7C,E,qDA2IjB,OACE,yBAAK2B,UAAU,OACb,yBAAKhB,GAAG,cACN,yBAAKgB,UAAU,SAAShB,GAAG,YACzB,yBAAKA,GAAG,WAAWiB,KAAK7B,MAAMK,SAC9B,yBAAKuB,UAAU,OACb,4BAAQhB,GAAG,QAAQkB,QAASD,KAAKpB,aAAjC,KAGA,4BAAQG,GAAG,QAAQkB,QAASD,KAAKpB,aAAjC,KAGA,4BAAQG,GAAG,OAAOkB,QAASD,KAAKpB,aAAhC,MAIF,yBAAKmB,UAAU,OACb,4BAAQhB,GAAG,OAAOkB,QAASD,KAAKpB,aAAhC,KAGA,4BAAQG,GAAG,OAAOkB,QAASD,KAAKpB,aAAhC,KAGA,4BAAQG,GAAG,MAAMkB,QAASD,KAAKpB,aAA/B,MAIF,yBAAKmB,UAAU,OACb,4BAAQhB,GAAG,MAAMkB,QAASD,KAAKpB,aAA/B,KAGA,4BAAQG,GAAG,MAAMkB,QAASD,KAAKpB,aAA/B,KAGA,4BAAQG,GAAG,QAAQkB,QAASD,KAAKpB,aAAjC,MAIF,yBAAKmB,UAAU,OACb,4BAAQhB,GAAG,OAAOkB,QAASD,KAAKpB,aAAhC,KAGA,4BAAQG,GAAG,UAAUkB,QAASD,KAAKpB,aAAnC,KAGA,4BAAQqB,QAASD,KAAKpB,YAAaG,GAAG,UAAtC,OAKJ,yBAAKgB,UAAU,SAAShB,GAAG,YACzB,4BAAQkB,QAASD,KAAKpB,YAAaG,GAAG,SAAtC,KAGA,4BAAQkB,QAASD,KAAKpB,YAAaG,GAAG,UAAtC,KAGA,4BAAQkB,QAASD,KAAKpB,YAAaG,GAAG,YAAtC,KAGA,4BAAQkB,QAASD,KAAKpB,YAAaG,GAAG,YAAtC,KAGA,4BAAQkB,QAASD,KAAKpB,YAAaG,GAAG,OAAtC,Y,GA3MMmB,IAAMC,YAqNpBb,EAAc,CAChBc,KAAM,IACNC,IAAK,IACLC,IAAK,IACLC,MAAO,IACPC,KAAM,IACNC,KAAM,IACNC,IAAK,IACLC,MAAO,IACPC,MAAO,IACPC,KAAM,KAEJhB,EAAiB,CACnBiB,IADmB,SACfrC,EAAGC,GAEL,OADAL,QAAQD,IAAIK,EAAIC,GACTD,EAAIC,GAEbqC,SALmB,SAKVtC,EAAGC,GAEV,OADAL,QAAQD,IAAIK,EAAIC,GACTD,EAAIC,GAEbsC,SATmB,SASVvC,EAAGC,GAEV,OADAL,QAAQD,IAAIK,EAAIC,GACTD,EAAIC,GAEbuC,OAbmB,SAaZxC,EAAGC,GAER,OADAL,QAAQD,IAAIK,EAAIC,GACTD,EAAIC,IAIXiB,EAAc,CAChBmB,IAAK,IACLC,SAAU,IACVC,SAAU,IACVC,OAAQ,IACRC,OAAQ,IAEKnD,ICnPK0B,QACW,cAA7B0B,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMjE,c","file":"static/js/main.a0c4fba1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { display: \"0\", a: \"\", b: \"\", operator: \"\", log: true };\n  }\n  logger = (message) => {\n    if (this.state.log) {\n      console.log(message);\n    }\n  };\n  reset = () => {\n    this.setState({ display: \"0\", a: \"\", b: \"\", operator: \"\" });\n  };\n  buttonPress = (e) => {\n    this.logger(this.state);\n    switch (e.target.id) {\n      case \"clear\":\n        this.reset();\n        break;\n      case \"equals\":\n      case \"add\":\n      case \"multiply\":\n      case \"divide\":\n      case \"subtract\":\n        this.doMath(e.target.id);\n        break;\n      case \"zero\":\n        if (this.state.display === \"0\") {\n          break;\n        } else {\n          this.setState({\n            display: this.state.display + \"0\",\n            b: this.state.b + \"0\",\n          });\n        }\n        break;\n      case \"decimal\":\n        this.logger(this.state.b.toString());\n        if (this.state.b.toString().indexOf(\".\") >= 0) {\n          break;\n        }\n        this.setState({\n          display: this.state.display + \".\",\n          b: this.state.b + \".\",\n        });\n        break;\n      default:\n        /* \n        0\n        3-2\n        \n        */\n        let index = Object.keys(stringToNum).indexOf(e.target.id);\n        let pre = \"\";\n        if (index >= 0) {\n          if (this.state.display !== \"0\") {\n            pre = this.state.display;\n          }\n          this.setState({\n            display: pre + index.toString(),\n            b: this.state.b + index.toString(),\n          });\n        }\n        break;\n    }\n  };\n  doMath = (option) => {\n    switch (option) {\n      case \"add\":\n      case \"multiply\":\n      case \"divide\":\n      case \"subtract\":\n        if (!this.state.operator) {\n          //if no operator on screen, just add operator on display(State), no math\n          this.setState({\n            display: this.state.display + mathSymbols[option],\n            a: this.state.b,\n            b: \"\",\n            operator: option,\n          });\n        } else if (\n          this.state.operator &&\n          option !== this.state.operator &&\n          !Boolean(parseInt(this.state.b))\n        ) {\n          //if\n          if (option == \"subtract\") {\n            this.setState({\n              display: this.state.display + mathSymbols[option],\n              b: \"-\",\n            });\n          } else {\n            this.setState({\n              display: this.state.display + mathSymbols[option],\n              b: \"\",\n              operator: option,\n            });\n          }\n        } else if (\n          this.state.operator &&\n          this.state.a &&\n          this.state.b &&\n          this.state.b !== \"-\"\n        ) {\n          //if operator exists on screen, then perform math according to the operator and then add new to the\n          let result;\n          result = mathOperations[this.state.operator](\n            parseFloat(this.state.a),\n            parseFloat(this.state.b)\n          );\n          this.setState({\n            display: result + mathSymbols[option],\n            a: result,\n            b: \"\",\n            operator: option,\n          });\n        }\n        console.log(this.state);\n        break;\n      case \"equals\":\n        if (this.state.b && this.state.operator) {\n          let a = this.state.a || 0;\n          let result = mathOperations[this.state.operator](\n            parseFloat(a),\n            parseFloat(this.state.b)\n          );\n\n          this.setState({\n            //notice how I made b the result and not a? that is because when you press\n            //[result]+, then + operation will make b=>a and new \"\"\" will be b\n\n            display: result,\n            b: result,\n            a: \"\",\n            operator: \"\",\n          });\n        }\n    }\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"calculator\">\n          <div className=\"column\" id=\"column-1\">\n            <div id=\"display\">{this.state.display}</div>\n            <div className=\"row\">\n              <button id=\"seven\" onClick={this.buttonPress}>\n                7\n              </button>\n              <button id=\"eight\" onClick={this.buttonPress}>\n                8\n              </button>\n              <button id=\"nine\" onClick={this.buttonPress}>\n                9\n              </button>\n            </div>\n            <div className=\"row\">\n              <button id=\"four\" onClick={this.buttonPress}>\n                4\n              </button>\n              <button id=\"five\" onClick={this.buttonPress}>\n                5\n              </button>\n              <button id=\"six\" onClick={this.buttonPress}>\n                6\n              </button>\n            </div>\n            <div className=\"row\">\n              <button id=\"one\" onClick={this.buttonPress}>\n                1\n              </button>\n              <button id=\"two\" onClick={this.buttonPress}>\n                2\n              </button>\n              <button id=\"three\" onClick={this.buttonPress}>\n                3\n              </button>\n            </div>\n            <div className=\"row\">\n              <button id=\"zero\" onClick={this.buttonPress}>\n                0\n              </button>\n              <button id=\"decimal\" onClick={this.buttonPress}>\n                .\n              </button>\n              <button onClick={this.buttonPress} id=\"equals\">\n                =\n              </button>\n            </div>\n          </div>\n          <div className=\"column\" id=\"column-2\">\n            <button onClick={this.buttonPress} id=\"clear\">\n              C\n            </button>\n            <button onClick={this.buttonPress} id=\"divide\">\n              /\n            </button>\n            <button onClick={this.buttonPress} id=\"multiply\">\n              x\n            </button>\n            <button onClick={this.buttonPress} id=\"subtract\">\n              -\n            </button>\n            <button onClick={this.buttonPress} id=\"add\">\n              +\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nvar stringToNum = {\n  zero: \"0\",\n  one: \"1\",\n  two: \"2\",\n  three: \"3\",\n  four: \"4\",\n  five: \"5\",\n  six: \"6\",\n  seven: \"7\",\n  eight: \"8\",\n  nine: \"9\",\n};\nvar mathOperations = {\n  add(a, b) {\n    console.log(a + b);\n    return a + b;\n  },\n  subtract(a, b) {\n    console.log(a + b);\n    return a - b;\n  },\n  multiply(a, b) {\n    console.log(a * b);\n    return a * b;\n  },\n  divide(a, b) {\n    console.log(a / b);\n    return a / b;\n  },\n};\n\nvar mathSymbols = {\n  add: \"+\",\n  subtract: \"-\",\n  multiply: \"x\",\n  divide: \"/\",\n  equals: \"\",\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}